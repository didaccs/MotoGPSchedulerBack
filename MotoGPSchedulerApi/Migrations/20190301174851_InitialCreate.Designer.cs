// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MotoGPSchedulerApi.Repository;
using System;

namespace MotoGPSchedulerApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190301174851_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Circuit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CountryId");

                    b.Property<long?>("LastRecordId");

                    b.Property<float>("Length");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StraightLong");

                    b.Property<int>("Turns");

                    b.Property<float>("Width");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LastRecordId");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CircuitId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Pilot")
                        .IsRequired();

                    b.Property<TimeSpan>("Time");

                    b.HasKey("Id");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Circuit", b =>
                {
                    b.HasOne("MotoGPSchedulerApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MotoGPSchedulerApi.Models.Record", "LastRecord")
                        .WithMany()
                        .HasForeignKey("LastRecordId");
                });

            modelBuilder.Entity("MotoGPSchedulerApi.Models.Event", b =>
                {
                    b.HasOne("MotoGPSchedulerApi.Models.Circuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId");
                });
#pragma warning restore 612, 618
        }
    }
}
